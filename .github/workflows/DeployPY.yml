name: Version, Tag, Release & Package

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - develop

jobs:
  versioning-and-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      full_tag: ${{ steps.version.outputs.full_tag }}
      is_latest: ${{ steps.version.outputs.is_latest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install toml
        run: |
          python -m pip install toml

      - name: Get current version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "CURRENT_VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Increment version based on source branch
        id: increment_version
        run: |
          CURRENT_VERSION=${{ env.CURRENT_VERSION }}
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          TARGET_BRANCH="${{ github.base_ref }}"
          
          CLEAN_VERSION=$(echo $CURRENT_VERSION | sed 's/-pre-prod//')
          
          case $BRANCH_NAME in
            feat/*|feature/*)
              NEW_VERSION=$(echo $CLEAN_VERSION | awk -F. -v OFS=. '{$2++; $3=0; print $0}')
              ;;
            fix/*|hotfix/*)
              NEW_VERSION=$(echo $CLEAN_VERSION | awk -F. -v OFS=. '{$3++; print $0}')
              ;;
            *breaking*|*major*)
              NEW_VERSION=$(echo $CLEAN_VERSION | awk -F. -v OFS=. '{$1++; $2=0; $3=0; print $0}')
              ;;
            *)
              NEW_VERSION=$CLEAN_VERSION
              ;;
          esac
          
          if [[ "$TARGET_BRANCH" == "develop" ]]; then
            FULL_VERSION="${NEW_VERSION}-pre-prod"
            IS_LATEST="false"
          elif [[ "$TARGET_BRANCH" == "main" ]]; then
            FULL_VERSION="${NEW_VERSION}"
            IS_LATEST="true"
          fi
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
          echo "IS_LATEST=$IS_LATEST" >> $GITHUB_ENV

      - name: Get PR details and extract changelog
        run: |
          PR_DATA=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}")
          
          PR_BODY=$(echo "$PR_DATA" | jq -r '.body // ""')
          
          echo "🔍 PR Body (first 500 chars):"
          echo "$PR_BODY" | head -c 500
          echo ""
          echo "..."
          
          if echo "$PR_BODY" | grep -q -i -E "[@#](changelog|changes|release.notes?)"; then
            echo "✅ Changelog marker found!"
            CHANGELOG=$(echo "$PR_BODY" | sed -n -E '/[@#](changelog|changes|release.notes?)/I,$p' | sed '1d' | sed '/^[[:space:]]*$/d')
          else
            echo "❌ No changelog marker found, using default"
            CHANGELOG="- Update to version ${{ env.FULL_VERSION }}"
          fi
          
          if [ -z "$CHANGELOG" ]; then
            echo "⚠️  Empty changelog, using default"
            CHANGELOG="- Update to version ${{ env.FULL_VERSION }}"
          fi
          
          echo "📋 Final changelog:"
          echo "$CHANGELOG"
          echo ""
          
          CHANGELOG_B64=$(echo "$CHANGELOG" | base64 -w 0)
          echo "CHANGELOG_B64=${CHANGELOG_B64}" >> $GITHUB_ENV

      - name: Update version in pyproject.toml
        id: version
        run: |
          python -c "import toml; data = toml.load('pyproject.toml'); data['project']['version'] = '${{ env.FULL_VERSION }}'; toml.dump(data, open('pyproject.toml', 'w'))"
          echo "version=${{ env.NEW_VERSION }}" >> $GITHUB_OUTPUT
          echo "full_tag=${{ env.FULL_VERSION }}" >> $GITHUB_OUTPUT
          echo "is_latest=${{ env.IS_LATEST }}" >> $GITHUB_OUTPUT

      - name: Commit and push updated pyproject.toml
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          git add pyproject.toml
          git commit -m "Update version to ${{ env.FULL_VERSION }}"
          git push origin ${{ github.ref_name }}

      - name: Remove old latest tag
        if: env.IS_LATEST == 'true'
        run: |
          if git tag -l | grep -q "^latest$"; then
            git tag -d latest || true
            git push origin :refs/tags/latest || true
          fi

      - name: Create Git tags
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          git tag ${{ env.FULL_VERSION }}
          git push origin ${{ env.FULL_VERSION }}
          
          if [[ "${{ env.IS_LATEST }}" == "true" ]]; then
            git tag latest
            git push origin latest
          fi

      - name: Create GitHub Release
        run: |
          CHANGELOG_DECODED=$(echo "$CHANGELOG_B64" | base64 -d)
          
          RELEASE_PAYLOAD=$(jq -n \
            --arg tag_name "${{ env.FULL_VERSION }}" \
            --arg name "Release ${{ env.FULL_VERSION }}" \
            --arg changelog "$CHANGELOG_DECODED" \
            --arg full_version "${{ env.FULL_VERSION }}" \
            --arg source_branch "${{ github.event.pull_request.head.ref }}" \
            --arg target_branch "${{ github.base_ref }}" \
            --arg pr_author "${{ github.event.pull_request.user.login }}" \
            --arg is_latest_str "$([[ "${{ env.IS_LATEST }}" == "true" ]] && echo "true" || echo "false")" \
            --argjson prerelease "$([[ "${{ env.IS_LATEST }}" != "true" ]] && echo true || echo false)" \
            '{
              tag_name: $tag_name,
              name: $name,
              body: ("## 📋 Changelog\n\n" + $changelog + "\n\n## 🏷️ Tags\n- **Version**: `" + $full_version + "`" + (if ($is_latest_str == "true") then "\n- **Latest**: `latest`" else "" end) + "\n\n## 📦 Docker Package\n\n```bash\n# Pull specific version\ndocker pull ghcr.io/baptiste-ferrand/template-release:" + $full_version + (if ($is_latest_str == "true") then "\n# Pull latest stable\ndocker pull ghcr.io/baptiste-ferrand/template-release:latest" else "" end) + "\n```\n\n## ℹ️ Information\n\n- **Source branch**: `" + $source_branch + "`\n- **Target branch**: `" + $target_branch + "`\n- **Release type**: " + (if ($is_latest_str == "true") then "**Stable** 🎯" else "**Pre-production** 🧪" end) + "\n- **PR author**: @" + $pr_author),
              prerelease: $prerelease,
              make_latest: $is_latest_str
            }')
          
          echo "🚀 Creating release with payload:"
          echo "$RELEASE_PAYLOAD" | jq '.'
          
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            -d "$RELEASE_PAYLOAD")
          
          echo "🎯 GitHub API Response:"
          echo "$RESPONSE" | jq '.'
          
          if echo "$RESPONSE" | jq -e '.html_url' > /dev/null; then
            RELEASE_URL=$(echo "$RESPONSE" | jq -r '.html_url')
            echo "✅ Release created successfully: $RELEASE_URL"
          else
            echo "❌ Failed to create release"
            echo "$RESPONSE"
            exit 1
          fi

  build-and-deploy-image:
    needs: versioning-and-release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare Docker tags
        id: prepare_tags
        run: |
          TAGS="ghcr.io/baptiste-ferrand/template-release:${{ needs.versioning-and-release.outputs.full_tag }}"
          
          if [[ "${{ needs.versioning-and-release.outputs.is_latest }}" == "true" ]]; then
            TAGS="${TAGS},ghcr.io/baptiste-ferrand/template-release:latest"
          fi
          
          echo "DOCKER_TAGS=${TAGS}" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64/v8
          tags: ${{ env.DOCKER_TAGS }}
          labels: |
            org.opencontainers.image.title=Track&Train API
            org.opencontainers.image.description=API for Track&Train application
            org.opencontainers.image.version=${{ needs.versioning-and-release.outputs.full_tag }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}

      - name: Deployment summary
        run: |
          echo "## 🎉 Deployment successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Package created" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: \`${{ needs.versioning-and-release.outputs.full_tag }}\`" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.versioning-and-release.outputs.is_latest }}" == "true" ]]; then
            echo "- **Latest**: \`latest\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Docker commands" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ghcr.io/baptiste-ferrand/template-release:${{ needs.versioning-and-release.outputs.full_tag }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.versioning-and-release.outputs.is_latest }}" == "true" ]]; then
            echo "docker pull ghcr.io/baptiste-ferrand/template-release:latest" >> $GITHUB_STEP_SUMMARY
          fi
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 pyproject.toml" >> $GITHUB_STEP_SUMMARY
          echo "- Version in pyproject.toml updated automatically" >> $GITHUB_STEP_SUMMARY